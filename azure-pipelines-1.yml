trigger:
  branches:
    include:
      - main  # Cambia "main" por tu rama de despliegue principal, si es otra.

# Definir las variables de entorno
variables:
  dockerRegistryServiceConnection: 'acr_connection'  # Nombre de la conexión de servicio al ACR
  imageRepository: 'tcs'  # Nombre del repositorio de imágenes en ACR
  containerRegistry: 'acrdevops.azurecr.io'  # Dirección de tu ACR
  kubernetesServiceConnection: 'aks_cluster_connection'  # Nombre de la conexión de servicio para AKS
  aksClusterName: 'aks-cluster-devops-tcs'  # Nombre del clúster AKS
  aksResourceGroup: 'devops-springboot-tcs-rg'  # Grupo de recursos de AKS
  namespace: 'default'  # Namespace en AKS donde se desplegará la imagen
  dockerfilePath: 'devops-tcs/Dockerfile'  # Ruta del archivo Dockerfile

stages:
  - stage: Deploy
    displayName: 'Deploy to AKS'
    jobs:
      - deployment: Deploy
        displayName: 'Deploy to AKS'
        environment: 'aks'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                # Instalar kubectl en el agente
                - task: Kubernetes@1
                  displayName: 'Install kubectl'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'  # Referencia a la conexión de servicio de AKS
                    namespace: '$(namespace)'
                    command: 'installKubectl'
                    secretType: 'dockerRegistry'
                    containerRegistryType: 'Azure Container Registry'

                # Actualizar el deployment en AKS
                - task: Kubernetes@1
                  displayName: 'Deploy to AKS'
                  inputs:
                    connectionType: 'Kubernetes Service Connection'
                    kubernetesServiceEndpoint: '$(kubernetesServiceConnection)'  # Referencia a la conexión de servicio de AKS
                    namespace: '$(namespace)'
                    command: 'apply'
                    useConfigurationFile: true
                    configurationType: 'inline'
                    inline: |
                      apiVersion: apps/v1
                      kind: Deployment
                      metadata:
                        name: tcs-deployment  # Nombre del deployment
                      spec:
                        replicas: 1
                        selector:
                          matchLabels:
                            app: test-app-tcs  # Cambia si tienes una app diferente
                        template:
                          metadata:
                            labels:
                              app: test-app-tcs
                          spec:
                            containers:
                            - name: tcs-contenedor
                              image: $(containerRegistry)/$(imageRepository):$(Build.BuildId)  # Referencia a la imagen creada en CI
                              ports:
                              - containerPort: 8080
                    secretType: 'dockerRegistry'
                    containerRegistryType: 'Azure Container Registry'